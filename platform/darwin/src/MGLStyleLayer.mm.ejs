<%
  const type = locals.type;
  const layoutProperties = locals.layoutProperties;
  const paintProperties = locals.paintProperties;
-%>
// This file is generated. 
// Edit platform/darwin/scripts/generate-style-code.js, then run `make style-code-darwin`.

#import "MGLSource.h"
#import "MGLMapView_Private.h"
#import "NSPredicate+MGLAdditions.h"
#import "MGLStyleLayer_Private.h"
#import "MGLStyleValue_Private.h"
#import "MGL<%- camelize(type) %>StyleLayer.h"

#include <mbgl/style/layers/<%- type %>_layer.hpp>

namespace mbgl {

    using namespace style;

<% if (layoutProperties.length) { -%>
<% for (const property of layoutProperties) { -%>
<% if (property.type == "enum") { -%>
    MBGL_DEFINE_ENUM(MGL<%- camelize(property.name) %>, {
<% for (const value in property.values) { -%>
        { MGL<%- camelize(property.name) %><%- camelize(value) %>, "<%-value%>" },
<% } -%>
    });
<% } -%>
<% } -%>
<% } -%>

<% if (paintProperties.length) { -%>
<% for (const property of paintProperties) { -%>
<% if (property.type == "enum") { -%>
    MBGL_DEFINE_ENUM(MGL<%- camelize(property.name) %>, {
<% for (const value in property.values) { -%>
        { MGL<%- camelize(property.name) %><%- camelize(value) %>, "<%-value%>" },
<% } -%>
    });
<% } -%>
<% } -%>
<% } -%>
}

@interface MGL<%- camelize(type) %>StyleLayer ()

@property (nonatomic) mbgl::style::<%- camelize(type) %>Layer *rawLayer;

@end

@implementation MGL<%- camelize(type) %>StyleLayer
{
    std::unique_ptr<mbgl::style::<%- camelize(type) %>Layer> _pendingLayer;
}

<% if (type == 'background') { -%>
- (instancetype)initWithIdentifier:(NSString *)identifier
{
    if (self = [super initWithIdentifier:identifier]) {
        auto layer = std::make_unique<mbgl::style::<%- camelize(type) %>Layer>(identifier.UTF8String);
        _pendingLayer = std::move(layer);
        _rawLayer = _pendingLayer.get();
    }
    return self;
}

<% } else { -%>
- (instancetype)initWithIdentifier:(NSString *)identifier source:(MGLSource *)source
{
    if (self = [super initWithIdentifier:identifier source:source]) {
        auto layer = std::make_unique<mbgl::style::<%- camelize(type) %>Layer>(identifier.UTF8String, source.identifier.UTF8String);
        _pendingLayer = std::move(layer);
        _rawLayer = _pendingLayer.get();
    }
    return self;
}

<% } -%>

<% if (type !== 'background' && type !== 'raster') { -%>
- (NSString *)sourceLayerIdentifier
{
    auto layerID = _rawLayer->getSourceLayer();
    return layerID.empty() ? nil : @(layerID.c_str());
}

- (void)setSourceLayerIdentifier:(NSString *)sourceLayerIdentifier
{
    _rawLayer->setSourceLayer(sourceLayerIdentifier.UTF8String ?: "");
}

- (void)setPredicate:(NSPredicate *)predicate
{
    _rawLayer->setFilter(predicate.mgl_filter);
}

- (NSPredicate *)predicate
{
    return [NSPredicate mgl_predicateWithFilter:_rawLayer->getFilter()];
}

<% } -%>

#pragma mark -  Adding to and removing from a map view

- (void)addToMapView:(MGLMapView *)mapView
{
    [self addToMapView:mapView belowLayer:nil];
}

- (void)addToMapView:(MGLMapView *)mapView belowLayer:(MGLStyleLayer *)otherLayer
{
    if (otherLayer) {
        const mbgl::optional<std::string> belowLayerId{otherLayer.identifier.UTF8String};
        mapView.mbglMap->addLayer(std::move(_pendingLayer), belowLayerId);
    } else {
        mapView.mbglMap->addLayer(std::move(_pendingLayer));
    }
}

- (void)removeFromMapView:(MGLMapView *)mapView
{
    auto removedLayer = mapView.mbglMap->removeLayer(self.identifier.UTF8String);
    _pendingLayer = std::move(reinterpret_cast<std::unique_ptr<mbgl::style::<%- camelize(type) %>Layer> &>(removedLayer));
    _rawLayer = _pendingLayer.get();
}

<% if (layoutProperties.length) { -%>
#pragma mark - Accessing the Layout Attributes

<% for (const property of layoutProperties) { -%>
- (void)set<%- camelize(property.name) %>:(MGLStyleValue<<%- propertyType(property, true) %>> *)<%- objCName(property) %> {
<% if (property.type == "enum") { -%>
    if ([<%- objCName(property) %> isKindOfClass:[MGLStyleFunction class]]) {
        MGLStyleFunction<NSValue *> *function = (MGLStyleFunction<NSValue *> *)<%- objCName(property) %>;
        __block std::vector<std::pair<float, mbgl::style::<%- mbglType(property) %>>> mbglStops;
        [function.stops enumerateKeysAndObjectsUsingBlock:^(NSNumber * _Nonnull zoomKey, MGLStyleValue<NSValue *> * _Nonnull stopValue, BOOL * _Nonnull stop) {
            id value = [(MGLStyleConstantValue<NSValue *> *)stopValue rawValue];
            MGL<%- camelize(property.name) %> <%- objCName(property) %>Value;
            [value getValue:&<%- objCName(property) %>Value];
            auto str = mbgl::Enum<MGL<%- camelize(property.name) %>>::toString(<%- objCName(property) %>Value);
            auto mbglValue = mbgl::Enum<mbgl::style::<%- mbglType(property) %>>::toEnum(str).value_or(_rawLayer->getDefault<%- camelize(property.name) %>().asConstant());
            auto mbglStopValue = mbgl::style::PropertyValue<mbgl::style::<%- mbglType(property) %>>(mbglValue);
            mbglStops.emplace_back(zoomKey.floatValue, mbglStopValue.asConstant());
        }];
        auto func = mbgl::style::Function<mbgl::style::<%- mbglType(property) %>>({{mbglStops}}, function.base);
        _rawLayer->set<%- camelize(property.name) %>(func);
        return;
    }
    id value = [(MGLStyleConstantValue<NSValue *> *)<%- objCName(property) %> rawValue];
    MGL<%- camelize(property.name) %> <%- objCName(property) %>Value;
    [value getValue:&<%- objCName(property) %>Value];
    auto str = mbgl::Enum<MGL<%- camelize(property.name) %>>::toString(<%- objCName(property) %>Value);
    auto mbglValue = mbgl::Enum<mbgl::style::<%- mbglType(property) %>>::toEnum(str).value_or(_rawLayer->getDefault<%- camelize(property.name) %>().asConstant());
    _rawLayer->set<%- camelize(property.name) %>(mbglValue);
<% } else { -%>
    auto mbglValue = MGLStyleValueTransformer<<%- valueTransformerArguments(property).join(', ') %>>().toPropertyValue(<%- objCName(property) %>);
    _rawLayer->set<%- camelize(property.name) %>(mbglValue);
<% } -%>
}

- (MGLStyleValue<<%- propertyType(property, true) %>> *)<%- objCName(property) %> {
    auto propertyValue = _rawLayer->get<%- camelize(property.name) %>() ?: _rawLayer->getDefault<%- camelize(property.name) %>();
<% if (property.type == "enum") { -%>    
    return MGLStyleEnumerationValueTransformer<mbgl::style::<%- mbglType(property) %>, MGL<%- camelize(property.name) %>>().propertyValueMGLStyleValue(propertyValue);
<% } else { -%>
    return MGLStyleValueTransformer<<%- valueTransformerArguments(property).join(', ') %>>().toStyleValue(propertyValue);
<% } -%>
}

<% } -%>
<% } -%>
<% if (paintProperties.length) { -%>
#pragma mark - Accessing the Paint Attributes

<% for (const property of paintProperties) { -%>
- (void)set<%- camelize(property.name) %>:(MGLStyleValue<<%- propertyType(property, true) %>> *)<%- objCName(property) %> {
<% if (property.type == "enum") { -%>
    if ([<%- objCName(property) %> isKindOfClass:[MGLStyleFunction class]]) {
        MGLStyleFunction<NSValue *> *function = (MGLStyleFunction<NSValue *> *)<%- objCName(property) %>;
        __block std::vector<std::pair<float, mbgl::style::<%- mbglType(property) %>>> mbglStops;
        [function.stops enumerateKeysAndObjectsUsingBlock:^(NSNumber * _Nonnull zoomKey, MGLStyleValue<NSValue *> * _Nonnull stopValue, BOOL * _Nonnull stop) {
            id value = [(MGLStyleConstantValue<NSValue *> *)stopValue rawValue];
            MGL<%- camelize(property.name) %> <%- objCName(property) %>Value;
            [value getValue:&<%- objCName(property) %>Value];
            auto str = mbgl::Enum<MGL<%- camelize(property.name) %>>::toString(<%- objCName(property) %>Value);
            auto mbglValue = mbgl::Enum<mbgl::style::<%- mbglType(property) %>>::toEnum(str).value_or(_rawLayer->getDefault<%- camelize(property.name) %>().asConstant());
            auto mbglStopValue = mbgl::style::PropertyValue<mbgl::style::<%- mbglType(property) %>>(mbglValue);
            mbglStops.emplace_back(zoomKey.floatValue, mbglStopValue.asConstant());
        }];
        auto func = mbgl::style::Function<mbgl::style::<%- mbglType(property) %>>({{mbglStops}}, function.base);
        _rawLayer->set<%- camelize(property.name) %>(func);
        return;
    }
    id value = [(MGLStyleConstantValue<NSValue *> *)<%- objCName(property) %> rawValue];
    MGL<%- camelize(property.name) %> <%- objCName(property) %>Value;
    [value getValue:&<%- objCName(property) %>Value];
    auto str = mbgl::Enum<MGL<%- camelize(property.name) %>>::toString(<%- objCName(property) %>Value);
    auto mbglValue = mbgl::Enum<mbgl::style::<%- mbglType(property) %>>::toEnum(str).value_or(_rawLayer->getDefault<%- camelize(property.name) %>().asConstant());
    _rawLayer->set<%- camelize(property.name) %>(mbglValue);
<% } else { -%>
    auto mbglValue = MGLStyleValueTransformer<<%- valueTransformerArguments(property).join(', ') %>>().toPropertyValue(<%- objCName(property) %>);
    _rawLayer->set<%- camelize(property.name) %>(mbglValue);
<% } -%>
}

- (MGLStyleValue<<%- propertyType(property, true) %>> *)<%- objCName(property) %> {
    auto propertyValue = _rawLayer->get<%- camelize(property.name) %>() ?: _rawLayer->getDefault<%- camelize(property.name) %>();
<% if (property.type == "enum") { -%>    
    return MGLStyleEnumerationValueTransformer<mbgl::style::<%- mbglType(property) %>, MGL<%- camelize(property.name) %>>().propertyValueMGLStyleValue(propertyValue);
<% } else { -%>
    return MGLStyleValueTransformer<<%- valueTransformerArguments(property).join(', ') %>>().toStyleValue(propertyValue);
<% } -%>
}

<% } -%>
<% } -%>

@end
